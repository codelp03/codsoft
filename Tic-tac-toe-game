import random

# Define the Tic-Tac-Toe board as a list
board = [" " for _ in range(9)]

# Function to print the Tic-Tac-Toe board
def print_board():
    for row in [board[i:i+3] for i in range(0, 9, 3)]:
        print(" | ".join(row))
        print("-" * 9)

# Function to check if the board is full
def is_board_full(board):
    return " " not in board

# Function to check if a player has won
def check_winner(board, player):
    winning_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]              # Diagonals
    ]
    for combo in winning_combinations:
        if all(board[i] == player for i in combo):
            return True
    return False

# Function to make a move for the AI (MiniMax algorithm)
def minimax(board, depth, maximizing_player):
    if check_winner(board, "O"):
        return 1
    if check_winner(board, "X"):
        return -1
    if is_board_full(board):
        return 0

    if maximizing_player:
        max_eval = float("-inf")
        for i in range(9):
            if board[i] == " ":
                board[i] = "O"
                eval = minimax(board, depth + 1, False)
                board[i] = " "
                max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float("inf")
        for i in range(9):
            if board[i] == " ":
                board[i] = "X"
                eval = minimax(board, depth + 1, True)
                board[i] = " "
                min_eval = min(min_eval, eval)
        return min_eval

# Function to find the best move for the AI
def best_move(board):
    best_move_index = -1
    best_move_value = float("-inf")
    for i in range(9):
        if board[i] == " ":
            board[i] = "O"
            move_value = minimax(board, 0, False)
            board[i] = " "
            if move_value > best_move_value:
                best_move_value = move_value
                best_move_index = i
    return best_move_index

# Main game loop
while True:
    print_board()
    player_move = int(input("Enter your move (0-8): "))
    if board[player_move] != " ":
        print("Invalid move. Try again.")
        continue
    board[player_move] = "X"

    if check_winner(board, "X"):
        print_board()
        print("Congratulations! You win!")
        break

    if is_board_full(board):
        print_board()
        print("It's a draw!")
        break

    ai_move = best_move(board)
    board[ai_move] = "O"

    if check_winner(board, "O"):
        print_board()
        print("AI wins! You lose.")
        break
